from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import random
import datetime



API_TOKEN = '5761808205:AAHOzoT6V-9ZO4pZ7Vecw7HPlqVXiFDZ4gw'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())




Storage=MemoryStorage()


class registration(StatesGroup):
    name=State()
    surname=State()
    age=State()
    address=State()
    number=State()




@dp.message_handler(commands=['start'])
async def send_start(message:types. Message):
    keyboard3 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    keyboard3.add(types.KeyboardButton(text="Launch Bot"))

    await message.answer(text="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É!", reply_markup=keyboard3)

    @dp.message_handler(lambda message: message.text == "Launch Bot")
    async def without1(message: types.Message):

        await message.reply(
                         "\n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—ã—Ç–∞—Ç—å —Å—É–¥—å–±—É –∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏\n/bones"
                         "\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã \n/help"
                         "\n–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n/url"
                         "\n–ö–≤–∞–∑–∏—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n/registration"
                         "\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n/datetime"
                         "\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ\n/photo"
                         "\n–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n/contact"
                         "\n–í—ã–±–æ—Ä –∫–µ–¥ Convers\n/Clothes", reply_markup=keyboard3)

@dp.message_handler(commands=["help"])
async def send_help(message:types.Message):
    await message.answer("–í —Å–ª—É—á–∞–µ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º-–ø—Ä–æ—à—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.\n–Ø –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.com/gareflecioner")

@dp.message_handler(commands="url")
async def send_commands(message: types.Message):
    buttons1 = [
        types.InlineKeyboardButton(text="GitHub", url="https://github.com/gareflecioner/hello_world.git"),
        types.InlineKeyboardButton(text="FSM", url="https://lolz.guru/threads/3769612/")
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*buttons1)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É!\n", reply_markup=keyboard)

@dp.message_handler(commands="photo")
async def send_photo(message: types.Message):
    keyboard2 = types.InlineKeyboardMarkup()

    b1=types.InlineKeyboardButton(text="üòç", callback_data="like")
    b2=types.InlineKeyboardButton(text="ü§¢",callback_data="dislike")
    keyboard2.add(b1,b2)
    await message.answer_photo(
                               photo='https://proprikol.ru/wp-content/uploads/2019/10/krasivye-kartinki-pandy-na-rabochij-stol-26.jpg',
                               caption='Panda?',
                               reply_markup=keyboard2)

@dp.callback_query_handler()
async def answer_photo(callback:types.CallbackQuery):
    if callback.data=="like":
        await callback.answer(text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!!\n‚úåÔ∏è")
    await callback.answer("–ù–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! \nüòø")


@dp.message_handler(commands=['contact'])
async def enter_contact(message: types.Message):
    keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)

    keyboard1.add(types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))

    await message.answer("number ,please", reply_markup=keyboard1)


#–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–Ω–µ—Å—Ç–∏ –≤ –±–¥
#–æ–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

@dp.message_handler(commands=['Clothes'])
async def get_clothes(message: types.Message):

    conn=sqlite3.connect("books.db")
    cur= conn.cursor()
    cur.execute("SELECT * FROM convers ORDER BY RANDOM() LIMIT 1;")
    result=cur.fetchone()[1]

    await bot.send_message(message.from_user.id,result)

@dp.message_handler(commands=["registration"])
async def send_registration(message:types.Message):
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è!")
    await registration.name.set()

@dp.message_handler(state=registration.name)
async def state1(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    name=message.text
    try:
        if not name.isnumeric():
            if len(name)>=5:
                await state.update_data(name)
                await message.answer(text="–£–∫–∞–∂–∏ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é!")
                await registration.surname.set()
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è")
                await registration.name.set()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–µ–∑ —Ü–∏—Ñ—Ä!')
            await registration.name.set()
    except:
        await message.answer(text="–£–∫–∞–∂–∏ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é")
        await registration.surname.set()


@dp.message_handler(state=registration.surname)
async def state2(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)

    await message.answer(text="–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await registration.age.set()

@dp.message_handler(state=registration.age)
async def state3(message:types.Message, state: FSMContext):
    await state.update_data(age=message.text)

    answer=message.text
    try:
        if answer.isnumeric():
            if int(answer)<100:
                await state.update_data(answer)
                await message.answer(text="–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
                await registration.number.set()

            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
                await registration.age.set()
        else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
                await registration.age.set()

    except Exception:
        await message.answer(text="–£–∫–∞–∂–∏ —Å–≤–æ–π –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å")
        await registration.address.set()

@dp.message_handler(state=registration.address)
async def state4(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer(text="–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await registration.number.set()


@dp.message_handler(state=registration.number)
async def state5(message:types.Message, state: FSMContext):
    await state.update_data(number=message.text)


    data = await state.get_data()
    await message.answer(f"–í–∞—à–µ –ò–º—è: {data['name']}\n"
                         f"–í–∞—à–∞ –§–∞–º–∏–ª–∏—è: {data['surname']}\n"
                         f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
                         f"–í–∞—à –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å: {data['address']}\n"
                         f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['number']}\n")

    await state.finish()


@dp.message_handler(commands=["datetime"])
async def send_datatime(message:types.Message):
    dt_now=datetime.datetime.now()
    await message.answer(dt_now)


@dp.message_handler(commands=["bones"])
async def send_bones(message:types.Message):
    random1 =["–û–¥–∏–Ω", "–î–≤–∞", "–¢—Ä–∏", "–ß–µ—Ç—ã—Ä–µ", "–ü—è—Ç—å", "–®–µ—Å—Ç—å", "–†–µ–±—Ä–æ"]
    random2 =random.choice(random1)
    await message.answer(random2)





if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)